setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Income Data")
Income_data_ACS_2018 <- read.csv("ACSST1Y2018.S1901-Data.csv", skip=1)
Income_data_ACS_2019 <- read.csv("ACSST1Y2019.S1901-Data.csv", skip=1)
Income_data_ACS_2021 <- read.csv("ACSST1Y2021.S1901-Data.csv", skip=1)
return_col_means <- function(df){
names <- c()
val <- c()
for(i in colnames(df)) {
mn <- mean(df[[i]])
names<- append(names, c(i))
val <- append(val, c(i))
}
return(data.frame(group = names,
values = val))
}
return_subset_by_state <- function(df, state){
subset_df <- df[grep(state, df$Geographic.Area.Name), ]
return (subset_df)
}
remove_nas <- function(df, Null) {
totalRows <- nrow(df)
print(totalRows)
index = c()
for ( i in colnames(df) ){
found = nrow(df[df[[i]] == Null, ])
if(found >= totalRows*0.5){
index <- append(index, c(FALSE))
}
else{ index <- append(index, c(TRUE))}
}
return(index)
}
Income_data_ACS_2018 <- Income_data_ACS_2018[, remove_nas(Income_data_ACS_2018, "null")]
Income_data_ACS_2019 <- Income_data_ACS_2019[, remove_nas(Income_data_ACS_2019, "null")]
Income_data_ACS_2021 <- Income_data_ACS_2021[, remove_nas(Income_data_ACS_2021, "null")]
household_features <- c("Geographic.Area.Name",
"Households..Estimate..Total",
"Households..Estimate..Less.than..10.000",
"Households..Estimate...10.000.to..14.999",
"Households..Estimate...15.000.to..24.999",
"Households..Estimate...25.000.to..34.999",
"Households..Estimate...35.000.to..49.999",
"Households..Estimate...50.000.to..74.999",
"Households..Estimate...75.000.to..99.999",
"Households..Estimate...100.000.to..149.999",
"Households..Estimate...150.000.to..199.999",
"Households..Estimate...150.000.to..199.999",
"Households..Estimate...200.000.or.more")
feature_names_updated <- c("Geographic.Area.Name",
"Estimate..Households..Total",
"Estimate..Households..Total..Less.than..10.000",
"Estimate..Households..Total...10.000.to..14.999",
"Estimate..Households..Total...15.000.to..24.999",
"Estimate..Households..Total...25.000.to..34.999",
"Estimate..Households..Total...35.000.to..49.999",
"Estimate..Households..Total...50.000.to..74.999",
"Estimate..Households..Total...75.000.to..99.999",
"Estimate..Households..Total...100.000.to..149.999",
"Estimate..Households..Total...150.000.to..199.999",
"Estimate..Households..Total...150.000.to..199.999",
"Estimate..Households..Total...200.000.or.more")
idx <- match(feature_names_updated, names(Income_data_ACS_2018))
idx
Household_2018 <-Income_data_ACS_2018[, idx ]
Household_2019 <- Income_data_ACS_2019[, idx ]
Household_2021 <- Income_data_ACS_2021[, idx ]
#### California  ####
library(ggplot2)
california_2018_household <- return_subset_by_state(Household_2018, "California")
california_2018_household <- california_2018_household[, -c(1)]
print(return_col_means(california_2018_household))
return_col_means <- function(df){
names <- c()
val <- c()
for(i in colnames(df)) {
mn <- mean(df[[i]])
names<- append(names, c(i))
val <- append(val, c(mn))
}
return(data.frame(group = names,
values = val))
}
print(return_col_means(california_2018_household))
means_for_each_category <- return_col_means(california_2018_household))
means_for_each_category <- return_col_means(california_2018_household)
ggplot(means_for_each_category, aes(x = group, y = values )) +
geom_bar()
ggplot(means_for_each_category, aes(x = group, y = values )) +
geom_bar(stat = "identity")
# Total Percent value we don't need but it is needed to find the total
# Total Household number 321886
california_2018_household <- california_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(california_2018_household)
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity")
feature_names_updated <- c("Geographic.Area.Name",
"Estimate..Households..Total",
"Estimate..Households..Total..Less.than..10.000",
"Estimate..Households..Total...10.000.to..14.999",
"Estimate..Households..Total...15.000.to..24.999",
"Estimate..Households..Total...25.000.to..34.999",
"Estimate..Households..Total...35.000.to..49.999",
"Estimate..Households..Total...50.000.to..74.999",
"Estimate..Households..Total...75.000.to..99.999",
"Estimate..Households..Total...100.000.to..149.999",
"Estimate..Households..Total...150.000.to..199.999",
"Estimate..Households..Total...200.000.or.more")
idx <- match(feature_names_updated, names(Income_data_ACS_2018))
idx
Household_2018 <-Income_data_ACS_2018[, idx ]
Household_2019 <- Income_data_ACS_2019[, idx ]
Household_2021 <- Income_data_ACS_2021[, idx ]
#### California  ####
library(ggplot2)
california_2018_household <- return_subset_by_state(Household_2018, "California")
# Total Percent value we don't need but it is needed to find the total
# Total Household number 321886
california_2018_household <- california_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(california_2018_household)
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity")
return_col_means <- function(df){
names <- c()
val <- c()
for(i in colnames(df)) {
print(i)
mn <- mean(df[[i]])
names<- append(names, c(i))
val <- append(val, c(mn))
}
return(data.frame(group = names,
values = val))
}
means_for_each_category <- return_col_means(california_2018_household)
print(means_for_each_category)
means_for_each_category <- return_col_means(california_2018_household)
means_for_each_category$group <- factor(means_for_each_category$groupm,
levels = means_for_each_category$group)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
print(means_for_each_category)
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
flip_data()
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
scale_y_reverse( lim=c(10,0))
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
scale_y_reverse()
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
scale_y_discrete(limits=rev)
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity") +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group, color = "red" )) +
geom_bar(stat = "identity") +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group, color = "red", fill = "red" )) +
geom_bar(stat = "identity") +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group ), fill = "red") +
geom_bar(stat = "identity") +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity", fill = "red") +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity", fill = "red", alpha = 0.76) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity", fill = "red", alpha = 0.75) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity", fill = "red", alpha = 0.2) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group )) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group, label = values)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5, label = values) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
geom_text(label = values)+
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket")
# 2019
california_2019_household <- return_subset_by_state(Household_2019, "California")
# Total Percent value we don't need but it is needed to find the total
# Total Household number 321886
california_2019_household <- california_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(california_2019_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
california_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket 2019")
california_income_brackets_2019
california_2021_household <- return_subset_by_state(Household_2021, "California")
# Total Percent value we don't need but it is needed to find the total
# Total Household number 321886
california_2021_household <- california_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(california_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
california_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket 2021")
california_income_brackets_2021
california_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket 2021")
california_income_brackets_2021
NY_2018_household <- return_subset_by_state(Household_2018, "New York")
NY_2018_household <- NY_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2021
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2021
NY_2018_household <- return_subset_by_state(Household_2018, "New York")
NY_2018_household <- NY_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2018 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2021
NY_income_brackets_2018
NY_income_brackets_2018 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2018
NY_2021_household <- return_subset_by_state(Household_2018, "New York")
NY_2021_household <- NY_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2021")
NY_income_brackets_2021
NY_2021_household <- return_subset_by_state(Household_2021, "New York")
NY_2021_household <- NY_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2021")
NY_income_brackets_2021
NY_2019_household <- return_subset_by_state(Household_2019, "New York")
NY_2019_household <- NY_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2021")
NY_income_brackets_2019
NY_income_brackets_2019
NY_2019_household <- return_subset_by_state(Household_2019, "New York")
NY_2019_household <- NY_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2019_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2019")
NY_income_brackets_2019
WA_2018_household <- return_subset_by_state(Household_2018, "Washington")
WA_2018_household <- WA_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(WA_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
WA_income_brackets_2018 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "Washington Percent of Total Household Borken Down by Income Bracket 2018")
WA_income_brackets_2018
# 2019
WA_2019_household <- return_subset_by_state(Household_2019, "Washington")
WA_2019_household <- WA_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(WA_2019_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
WA_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "purple", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "Washington Percent of Total Household Borken Down by Income Bracket 2019")
WA_income_brackets_2018
WA_income_brackets_2019
#2021
WA_2021_household <- return_subset_by_state(Household_2021, "Washington")
WA_2021_household <- WA_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(WA_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
WA_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "Washington Percent of Total Household Borken Down by Income Bracket 2021")
WA_income_brackets_2021
summary(cost_of_living_data)
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
library(ggplot2)
require("ggrepel")
# Graphinh Cost of Index Data
order_by_cost_index <- cost_of_living_data
order_by_cost_index$state <- factor(order_by_cost_index$state,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
pos <- order_by_cost_index$costIndex
pos
graph_by_state_index <- ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = costIndex), size = 2.5)
print(graph_by_state_index +
labs(title = "State vs Cost of Index", y = "State Name", x = "Cost of Living Index"))
#
order_by_cost_housing <- cost_of_living_data
order_by_cost_housing$state <- factor(order_by_cost_housing$state,
levels = order_by_cost_housing$state[order(order_by_cost_housing$housingCost)])
graph_by_state_housing <- ggplot(order_by_cost_housing , aes(housingCost, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = housingCost), size = 2.5)
print(graph_by_state_housing +
labs(title = "State vs Cost of Housing Cost", y = "State Name", x = "Housing Cost Index"))
graph_by_state_index <- ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = costIndex), size = 2.5)
print(graph_by_state_index +
labs(title = "State vs Cost of Index", y = "State Name", x = "Cost of Living Index"))
# Working on Desktop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Income Data")
Income_data_ACS_2010 <- read.csv("ACSST1Y2010.S1901-Data.csv", skip=1)
Income_data_ACS_2011 <- read.csv("ACSST1Y2011.S1901-Data.csv", skip=1)
Income_data_ACS_2012 <- read.csv("ACSST1Y2012.S1901-Data.csv", skip=1)
Income_data_ACS_2013 <- read.csv("ACSST1Y2013.S1901-Data.csv", skip=1)
Income_data_ACS_2014 <- read.csv("ACSST1Y2014.S1901-Data.csv", skip=1)
Income_data_ACS_2015 <- read.csv("ACSST1Y2015.S1901-Data.csv", skip=1)
Income_data_ACS_2016 <- read.csv("ACSST1Y2016.S1901-Data.csv", skip=1)
Income_data_ACS_2017 <- read.csv("ACSST1Y2017.S1901-Data.csv", skip=1)
Income_data_ACS_2018 <- read.csv("ACSST1Y2018.S1901-Data.csv", skip=1)
Income_data_ACS_2019 <- read.csv("ACSST1Y2019.S1901-Data.csv", skip=1)
Income_data_ACS_2021 <- read.csv("ACSST1Y2021.S1901-Data.csv", skip=1)
# Working on Desktop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Housing Statistic")
Housing_data_ACS_2010 <- read.csv("ACSDP1Y2010.DP04-Data.csv", skip=1)
Housing_data_ACS_2011 <- read.csv("ACSDP1Y2011.DP04-Data.csv", skip=1)
Housing_data_ACS_2012 <- read.csv("ACSDP1Y2012.DP04-Data.csv", skip=1)
Housing_data_ACS_2013 <- read.csv("ACSDP1Y2013.DP04-Data.csv", skip=1)
Housing_data_ACS_2014 <- read.csv("ACSDP1Y2014.DP04-Data.csv", skip=1)
Housing_data_ACS_2015 <- read.csv("ACSDP1Y2015.DP04-Data.csv", skip=1)
Housing_data_ACS_2016 <- read.csv("ACSDP1Y2016.DP04-Data.csv", skip=1)
Housing_data_ACS_2017 <- read.csv("ACSDP1Y2017.DP04-Data.csv", skip=1)
Housing_data_ACS_2018 <- read.csv("ACSDP1Y2018.DP04-Data.csv", skip=1)
Housing_data_ACS_2019 <- read.csv("ACSDP1Y2019.DP04-Data.csv", skip=1)
Housing_data_ACS_2021 <- read.csv("ACSDP1Y2021.DP04-Data.csv", skip=1)
remove_nas <- function(df, Null, rate=0.5) {
totalRows <- nrow(df)
print(totalRows)
index = c()
for ( i in colnames(df) ){
found = nrow(df[df[[i]] == Null, ])
if(found >= totalRows*rate){
index <- append(index, c(FALSE))
}
else{ index <- append(index, c(TRUE))}
}
return(index)
}
#Removing Null Values Based On if There are more than 50, "NULL" values
# entry in the estimate and margin of error columns indicates that data for this geographic area cannot be displayed because the number of sample cases is too small
Housing_data_ACS_2010 <- Housing_data_ACS_2010[, remove_nas(Housing_data_ACS_2010, "null")]
Housing_data_ACS_2011 <- Housing_data_ACS_2011[, remove_nas(Housing_data_ACS_2011, "null")]
Housing_data_ACS_2012 <- Housing_data_ACS_2012[, remove_nas(Housing_data_ACS_2012, "null")]
Housing_data_ACS_2013 <- Housing_data_ACS_2013[, remove_nas(Housing_data_ACS_2013, "null")]
Housing_data_ACS_2014 <- Housing_data_ACS_2014[, remove_nas(Housing_data_ACS_2014, "null")]
Housing_data_ACS_2015 <- Housing_data_ACS_2015[, remove_nas(Housing_data_ACS_2015, "null")]
Housing_data_ACS_2016 <- Housing_data_ACS_2016[, remove_nas(Housing_data_ACS_2016, "null")]
Housing_data_ACS_2017 <- Housing_data_ACS_2017[, remove_nas(Housing_data_ACS_2017, "null")]
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "null")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "null")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "null")]
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "(X)")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "(X)")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "(X)")]
feature_names_updated <- c("Geographic.Area.Name",
"Estimate..Households..Total",
"Estimate..Households..Total..Less.than..10.000",
"Estimate..Households..Total...10.000.to..14.999",
"Estimate..Households..Total...15.000.to..24.999",
"Estimate..Households..Total...25.000.to..34.999",
"Estimate..Households..Total...35.000.to..49.999",
"Estimate..Households..Total...50.000.to..74.999",
"Estimate..Households..Total...75.000.to..99.999",
"Estimate..Households..Total...100.000.to..149.999",
"Estimate..Households..Total...150.000.to..199.999",
"Estimate..Households..Total...200.000.or.more")
idx <- match(feature_names_updated, names(Income_data_ACS_2018))
idx
Household_2018 <-Income_data_ACS_2018[, idx ]
Household_2019 <- Income_data_ACS_2019[, idx ]
Household_2021 <- Income_data_ACS_2021[, idx ]
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
View(Housing_data_ACS_2010)
View(Income_data_ACS_2018)
colnames(Income_data_ACS_2010)
Housing_data_ACS_2010$Estimate..HOUSING.TENURE..Average.household.size.of.owner.occupied.unit
Housing_data_ACS_2021$Estimate..HOUSING.TENURE..Average.household.size.of.owner.occupied.unit
Housing_data_ACS_2021$Estimate..HOUSING.TENURE..Occupied.housing.units..Average.household.size.of.owner.occupied.unit
