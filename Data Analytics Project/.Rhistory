xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket 2021")
california_income_brackets_2021
california_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In California") +
ylab("Income Bracket ") +
labs(title = "Percent of Total Household Borken Down by Income Bracket 2021")
california_income_brackets_2021
NY_2018_household <- return_subset_by_state(Household_2018, "New York")
NY_2018_household <- NY_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2021
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2021
NY_2018_household <- return_subset_by_state(Household_2018, "New York")
NY_2018_household <- NY_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2018 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2021
NY_income_brackets_2018
NY_income_brackets_2018 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2018")
NY_income_brackets_2018
NY_2021_household <- return_subset_by_state(Household_2018, "New York")
NY_2021_household <- NY_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2021")
NY_income_brackets_2021
NY_2021_household <- return_subset_by_state(Household_2021, "New York")
NY_2021_household <- NY_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2021")
NY_income_brackets_2021
NY_2019_household <- return_subset_by_state(Household_2019, "New York")
NY_2019_household <- NY_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2021")
NY_income_brackets_2019
NY_income_brackets_2019
NY_2019_household <- return_subset_by_state(Household_2019, "New York")
NY_2019_household <- NY_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(NY_2019_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
NY_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "New York Percent of Total Household Borken Down by Income Bracket 2019")
NY_income_brackets_2019
WA_2018_household <- return_subset_by_state(Household_2018, "Washington")
WA_2018_household <- WA_2018_household[, -c(1:2)]
means_for_each_category <- return_col_means(WA_2018_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
WA_income_brackets_2018 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "red", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "Washington Percent of Total Household Borken Down by Income Bracket 2018")
WA_income_brackets_2018
# 2019
WA_2019_household <- return_subset_by_state(Household_2019, "Washington")
WA_2019_household <- WA_2019_household[, -c(1:2)]
means_for_each_category <- return_col_means(WA_2019_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
WA_income_brackets_2019 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "purple", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "Washington Percent of Total Household Borken Down by Income Bracket 2019")
WA_income_brackets_2018
WA_income_brackets_2019
#2021
WA_2021_household <- return_subset_by_state(Household_2021, "Washington")
WA_2021_household <- WA_2021_household[, -c(1:2)]
means_for_each_category <- return_col_means(WA_2021_household)
means_for_each_category$group <- factor(means_for_each_category$group,
levels = means_for_each_category$group)
WA_income_brackets_2021 <- ggplot(means_for_each_category, aes(x = values, y = group)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.5) +
scale_y_discrete(limits=rev) +
xlab("Percent of Total Household In New York") +
ylab("Income Bracket ") +
labs(title = "Washington Percent of Total Household Borken Down by Income Bracket 2021")
WA_income_brackets_2021
summary(cost_of_living_data)
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
library(ggplot2)
require("ggrepel")
# Graphinh Cost of Index Data
order_by_cost_index <- cost_of_living_data
order_by_cost_index$state <- factor(order_by_cost_index$state,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
pos <- order_by_cost_index$costIndex
pos
graph_by_state_index <- ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = costIndex), size = 2.5)
print(graph_by_state_index +
labs(title = "State vs Cost of Index", y = "State Name", x = "Cost of Living Index"))
#
order_by_cost_housing <- cost_of_living_data
order_by_cost_housing$state <- factor(order_by_cost_housing$state,
levels = order_by_cost_housing$state[order(order_by_cost_housing$housingCost)])
graph_by_state_housing <- ggplot(order_by_cost_housing , aes(housingCost, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = housingCost), size = 2.5)
print(graph_by_state_housing +
labs(title = "State vs Cost of Housing Cost", y = "State Name", x = "Housing Cost Index"))
graph_by_state_index <- ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = costIndex), size = 2.5)
print(graph_by_state_index +
labs(title = "State vs Cost of Index", y = "State Name", x = "Cost of Living Index"))
# Working on Desktop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Income Data")
Income_data_ACS_2010 <- read.csv("ACSST1Y2010.S1901-Data.csv", skip=1)
Income_data_ACS_2011 <- read.csv("ACSST1Y2011.S1901-Data.csv", skip=1)
Income_data_ACS_2012 <- read.csv("ACSST1Y2012.S1901-Data.csv", skip=1)
Income_data_ACS_2013 <- read.csv("ACSST1Y2013.S1901-Data.csv", skip=1)
Income_data_ACS_2014 <- read.csv("ACSST1Y2014.S1901-Data.csv", skip=1)
Income_data_ACS_2015 <- read.csv("ACSST1Y2015.S1901-Data.csv", skip=1)
Income_data_ACS_2016 <- read.csv("ACSST1Y2016.S1901-Data.csv", skip=1)
Income_data_ACS_2017 <- read.csv("ACSST1Y2017.S1901-Data.csv", skip=1)
Income_data_ACS_2018 <- read.csv("ACSST1Y2018.S1901-Data.csv", skip=1)
Income_data_ACS_2019 <- read.csv("ACSST1Y2019.S1901-Data.csv", skip=1)
Income_data_ACS_2021 <- read.csv("ACSST1Y2021.S1901-Data.csv", skip=1)
# Working on Desktop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Housing Statistic")
Housing_data_ACS_2010 <- read.csv("ACSDP1Y2010.DP04-Data.csv", skip=1)
Housing_data_ACS_2011 <- read.csv("ACSDP1Y2011.DP04-Data.csv", skip=1)
Housing_data_ACS_2012 <- read.csv("ACSDP1Y2012.DP04-Data.csv", skip=1)
Housing_data_ACS_2013 <- read.csv("ACSDP1Y2013.DP04-Data.csv", skip=1)
Housing_data_ACS_2014 <- read.csv("ACSDP1Y2014.DP04-Data.csv", skip=1)
Housing_data_ACS_2015 <- read.csv("ACSDP1Y2015.DP04-Data.csv", skip=1)
Housing_data_ACS_2016 <- read.csv("ACSDP1Y2016.DP04-Data.csv", skip=1)
Housing_data_ACS_2017 <- read.csv("ACSDP1Y2017.DP04-Data.csv", skip=1)
Housing_data_ACS_2018 <- read.csv("ACSDP1Y2018.DP04-Data.csv", skip=1)
Housing_data_ACS_2019 <- read.csv("ACSDP1Y2019.DP04-Data.csv", skip=1)
Housing_data_ACS_2021 <- read.csv("ACSDP1Y2021.DP04-Data.csv", skip=1)
remove_nas <- function(df, Null, rate=0.5) {
totalRows <- nrow(df)
print(totalRows)
index = c()
for ( i in colnames(df) ){
found = nrow(df[df[[i]] == Null, ])
if(found >= totalRows*rate){
index <- append(index, c(FALSE))
}
else{ index <- append(index, c(TRUE))}
}
return(index)
}
#Removing Null Values Based On if There are more than 50, "NULL" values
# entry in the estimate and margin of error columns indicates that data for this geographic area cannot be displayed because the number of sample cases is too small
Housing_data_ACS_2010 <- Housing_data_ACS_2010[, remove_nas(Housing_data_ACS_2010, "null")]
Housing_data_ACS_2011 <- Housing_data_ACS_2011[, remove_nas(Housing_data_ACS_2011, "null")]
Housing_data_ACS_2012 <- Housing_data_ACS_2012[, remove_nas(Housing_data_ACS_2012, "null")]
Housing_data_ACS_2013 <- Housing_data_ACS_2013[, remove_nas(Housing_data_ACS_2013, "null")]
Housing_data_ACS_2014 <- Housing_data_ACS_2014[, remove_nas(Housing_data_ACS_2014, "null")]
Housing_data_ACS_2015 <- Housing_data_ACS_2015[, remove_nas(Housing_data_ACS_2015, "null")]
Housing_data_ACS_2016 <- Housing_data_ACS_2016[, remove_nas(Housing_data_ACS_2016, "null")]
Housing_data_ACS_2017 <- Housing_data_ACS_2017[, remove_nas(Housing_data_ACS_2017, "null")]
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "null")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "null")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "null")]
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "(X)")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "(X)")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "(X)")]
feature_names_updated <- c("Geographic.Area.Name",
"Estimate..Households..Total",
"Estimate..Households..Total..Less.than..10.000",
"Estimate..Households..Total...10.000.to..14.999",
"Estimate..Households..Total...15.000.to..24.999",
"Estimate..Households..Total...25.000.to..34.999",
"Estimate..Households..Total...35.000.to..49.999",
"Estimate..Households..Total...50.000.to..74.999",
"Estimate..Households..Total...75.000.to..99.999",
"Estimate..Households..Total...100.000.to..149.999",
"Estimate..Households..Total...150.000.to..199.999",
"Estimate..Households..Total...200.000.or.more")
idx <- match(feature_names_updated, names(Income_data_ACS_2018))
idx
Household_2018 <-Income_data_ACS_2018[, idx ]
Household_2019 <- Income_data_ACS_2019[, idx ]
Household_2021 <- Income_data_ACS_2021[, idx ]
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
View(Housing_data_ACS_2010)
View(Income_data_ACS_2018)
colnames(Income_data_ACS_2010)
Housing_data_ACS_2010$Estimate..HOUSING.TENURE..Average.household.size.of.owner.occupied.unit
Housing_data_ACS_2021$Estimate..HOUSING.TENURE..Average.household.size.of.owner.occupied.unit
Housing_data_ACS_2021$Estimate..HOUSING.TENURE..Occupied.housing.units..Average.household.size.of.owner.occupied.unit
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data_by_county <- read.csv("/Cost of Living/Cost_Of_Living_Atlanta_data.csv")
cost_of_living_data_by_county <- read.csv("Cost of Living/Cost_Of_Living_Atlanta_data.csv")
View(cost_of_living_data_by_county)
# Working on Desktop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Income Data")
Income_data_ACS_2010 <- read.csv("ACSST1Y2010.S1901-Data.csv", skip=1)
Income_data_ACS_2011 <- read.csv("ACSST1Y2011.S1901-Data.csv", skip=1)
Income_data_ACS_2012 <- read.csv("ACSST1Y2012.S1901-Data.csv", skip=1)
Income_data_ACS_2013 <- read.csv("ACSST1Y2013.S1901-Data.csv", skip=1)
Income_data_ACS_2014 <- read.csv("ACSST1Y2014.S1901-Data.csv", skip=1)
Income_data_ACS_2015 <- read.csv("ACSST1Y2015.S1901-Data.csv", skip=1)
Income_data_ACS_2016 <- read.csv("ACSST1Y2016.S1901-Data.csv", skip=1)
Income_data_ACS_2017 <- read.csv("ACSST1Y2017.S1901-Data.csv", skip=1)
Income_data_ACS_2018 <- read.csv("ACSST1Y2018.S1901-Data.csv", skip=1)
Income_data_ACS_2019 <- read.csv("ACSST1Y2019.S1901-Data.csv", skip=1)
Income_data_ACS_2021 <- read.csv("ACSST1Y2021.S1901-Data.csv", skip=1)
# Working on Desktop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Housing Statistic")
Housing_data_ACS_2010 <- read.csv("ACSDP1Y2010.DP04-Data.csv", skip=1)
Housing_data_ACS_2011 <- read.csv("ACSDP1Y2011.DP04-Data.csv", skip=1)
Housing_data_ACS_2012 <- read.csv("ACSDP1Y2012.DP04-Data.csv", skip=1)
Housing_data_ACS_2013 <- read.csv("ACSDP1Y2013.DP04-Data.csv", skip=1)
Housing_data_ACS_2014 <- read.csv("ACSDP1Y2014.DP04-Data.csv", skip=1)
Housing_data_ACS_2015 <- read.csv("ACSDP1Y2015.DP04-Data.csv", skip=1)
Housing_data_ACS_2016 <- read.csv("ACSDP1Y2016.DP04-Data.csv", skip=1)
Housing_data_ACS_2017 <- read.csv("ACSDP1Y2017.DP04-Data.csv", skip=1)
Housing_data_ACS_2018 <- read.csv("ACSDP1Y2018.DP04-Data.csv", skip=1)
Housing_data_ACS_2019 <- read.csv("ACSDP1Y2019.DP04-Data.csv", skip=1)
Housing_data_ACS_2021 <- read.csv("ACSDP1Y2021.DP04-Data.csv", skip=1)
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
cost_of_living_data_by_county <- read.csv("Cost of Living/Cost_Of_Living_Atlanta_data.csv")
View(cost_of_living_data_by_county)
100*159
1009*159
1000*159
View(Housing_data_ACS_2010)
cost_of_living_data_by_county <- read.csv("Cost of Living/Cost_Of_Living_Atlanta_data.csv")
View(cost_of_living_data_by_county)
View(Housing_data_ACS_2010)
cost_of_living_data_by_county <- read.csv("Cost of Living/Cost_Of_Living_Atlanta_data.csv")
View(cost_of_living_data_by_county)
View(Housing_data_ACS_2010)
View(cost_of_living_data_by_county)
cost_of_living_data_by_county <- cost_of_living_data_by_county[,-c(3)]
View(cost_of_living_data_by_county)
cost_of_living_data_by_county <- read.csv("Cost of Living/Cost_Of_Living_Atlanta_data.csv")
cost_of_living_data_by_county <- cost_of_living_data_by_county[,-c(2,3)]
View(cost_of_living_data_by_county)
Income_Housing_Cost_2018_data <- join_data(Housing_data_ACS_2018, Income_data_ACS_2018, "Georaphic.Area.Name")
join_data <- function(df1, df2, feature_name){
return(merge(x=df1,y=df2,by=feature_name))
}
Income_Housing_Cost_2018_data <- join_data(Housing_data_ACS_2018, Income_data_ACS_2018, "Georaphic.Area.Name")
join_data <- function(df1, df2, feature_name){
return(merge(x=df1,y=df2,by=feature_name))
}
Income_Housing_Cost_2018_data <- join_data(Housing_data_ACS_2018, Income_data_ACS_2018, "Georaphic.Area.Name")
View(Housing_data_ACS_2019)
#Removing Null Values Based On if There are more than 50, "NULL" values
# entry in the estimate and margin of error columns indicates that data for this geographic area cannot be displayed because the number of sample cases is too small
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "null")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "null")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "null")]
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "(X)")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "(X)")]
remove_nas <- function(df, Null, rate=0.5) {
totalRows <- nrow(df)
print(totalRows)
index = c()
for ( i in colnames(df) ){
found = nrow(df[df[[i]] == Null, ])
if(found >= totalRows*rate){
index <- append(index, c(FALSE))
}
else{ index <- append(index, c(TRUE))}
}
return(index)
}
return_subset_by_state <- function(df, state){
subset_df <- df[grep(state, df$Geographic.Area.Name), ]
return (subset_df)
}
join_data <- function(df1, df2, feature_name){
return(merge(x=df1,y=df2,by=feature_name))
}
#Removing Null Values Based On if There are more than 50, "NULL" values
# entry in the estimate and margin of error columns indicates that data for this geographic area cannot be displayed because the number of sample cases is too small
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "null")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "null")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "null")]
Housing_data_ACS_2018 <- Housing_data_ACS_2018[, remove_nas(Housing_data_ACS_2018, "(X)")]
Housing_data_ACS_2019 <- Housing_data_ACS_2019[, remove_nas(Housing_data_ACS_2019, "(X)")]
Housing_data_ACS_2021 <- Housing_data_ACS_2021[, remove_nas(Housing_data_ACS_2021, "(X)")]
feature_names_updated <- c("Geographic.Area.Name",
"Estimate..Households..Total",
"Estimate..Households..Total..Less.than..10.000",
"Estimate..Households..Total...10.000.to..14.999",
"Estimate..Households..Total...15.000.to..24.999",
"Estimate..Households..Total...25.000.to..34.999",
"Estimate..Households..Total...35.000.to..49.999",
"Estimate..Households..Total...50.000.to..74.999",
"Estimate..Households..Total...75.000.to..99.999",
"Estimate..Households..Total...100.000.to..149.999",
"Estimate..Households..Total...150.000.to..199.999",
"Estimate..Households..Total...200.000.or.more")
idx <- match(feature_names_updated, names(Income_data_ACS_2018))
idx
Household_2018 <-Income_data_ACS_2018[, idx ]
Household_2019 <- Income_data_ACS_2019[, idx ]
Household_2021 <- Income_data_ACS_2021[, idx ]
Income_Housing_Cost_2018_data <- join_data(Housing_data_ACS_2018, Income_data_ACS_2018, "Georaphic.Area.Name")
View(Household_2018)
Income_Housing_Cost_2018_data <- join_data(Housing_data_ACS_2018, Income_data_ACS_2018, "Geographic.Area.Name")
View(Income_Housing_Cost_2018_data)
colnames(cost_of_living_data_by_county)["State and County"] <- "Geographic.Area.Name"
colnames(cost_of_living_data_by_county)["State and County"] <- "Geographic Area Name"
View(cost_of_living_data_by_county)
colnames(cost_of_living_data_by_county)["County.and.State"] <- "Geographic.Area.Name"
colnames(cost_of_living_data_by_county)[2] <- "Geographic.Area.Name"
# Features wanted from Housing data
colnames(Housing_data_ACS_2018)
return_subset_without_string <- function(df, subset){
return (df[ , -grepl( subset , names( df ) ) ])
}
Housing_data_test <- return_subset_without_string(Housing_data_ACS_2018, "Margin.of.Error")
View(Housing_data_test)
return_subset_without_string <- function(df, subset){
print(-grepl( subset , names( df ) ))
return (df[ , -grepl( subset , names( df ) ) ])
}
Housing_data_test <- return_subset_without_string(Housing_data_ACS_2018, "Margin.of.Error")
View(Housing_data_test)
View(Housing_data_ACS_2018)
return_subset_without_string <- function(df, subset){
print(grepl( subset , names( df ) ))
return (df[ , grepl( subset , names( df ) ) ])
}
Housing_data_test <- return_subset_without_string(Housing_data_ACS_2018, "Margin.of.Error")
View(Housing_data_test)
return_subset_without_string <- function(df, subset){
print(!grepl( subset , names( df ) ))
return (df[ , !grepl( subset , names( df ) ) ])
}
Housing_data_test <- return_subset_without_string(Housing_data_ACS_2018, "Margin.of.Error")
View(Housing_data_test)
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_data_ACS_2018, "Margin.of.Error")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_data_ACS_2019, "Margin.of.Error")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_data_ACS_2021, "Margin.of.Error")
View(Housing_Cleaned_data_2018)
#Removing Year Built
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_data_ACS_2018, "YEAR.STRUCTURE.BUILT")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_data_ACS_2019, "YEAR.STRUCTURE.BUILT")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_data_ACS_2021, "YEAR.STRUCTURE.BUILT")
return_subset_without_string <- function(df, subset){
return (df[ , !grepl( subset , names( df ) ) ])
}
return_subset_without_string <- function(df, subset){
return (df[ , !grepl( subset , names( df ) ) ])
}
Housing_data_ACS_2018
Housing_data_ACS_2018
#Removing the Margin of Error Features
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_data_ACS_2018, "Margin.of.Error")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_data_ACS_2019, "Margin.of.Error")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_data_ACS_2021, "Margin.of.Error")
#Removing Year Built
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "YEAR.STRUCTURE.BUILT")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "YEAR.STRUCTURE.BUILT")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "YEAR.STRUCTURE.BUILT")
#Removing Unit Structure
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "UNITS.IN.STRUCTURE")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "UNITS.IN.STRUCTURE")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "UNITS.IN.STRUCTURE")
#Removing Unit BEDROOMS
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "BEDROOMS")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "BEDROOMS")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "BEDROOMS")
#Removing Unit ROOMS
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "ROOMS")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "ROOMS")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "ROOMS")
View(Household_2018)
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "YEAR.HOUSHOLDER.MOVED.INTO")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "YEAR.HOUSHOLDER.MOVED.INTO")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "YEAR.HOUSHOLDER.MOVED.INTO")
View(Housing_Cleaned_data_2018)
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "YEAR.HOUSHOLDER.MOVED.INTO.UNIT")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "YEAR.HOUSHOLDER.MOVED.INTO.UNIT")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "YEAR.HOUSHOLDER.MOVED.INTO.UNIT")
View(Housing_Cleaned_data_2018)
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_subset_without_string(Housing_Cleaned_data_2018, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
Housing_Cleaned_data_2019 <- return_subset_without_string(Housing_Cleaned_data_2019, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
Housing_Cleaned_data_2021 <- return_subset_without_string(Housing_Cleaned_data_2021, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
return_feature_subset_without_given_string
return_feature_subset_without_given_string <- function(df, subset){
return (df[ , !grepl( subset , names( df ) ) ])
}
View(Housing_Cleaned_data_2018)
Housing_Cleaned_data_2018$
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
#Removing the Margin of Error Features
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_data_ACS_2018, "Margin.of.Error")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_data_ACS_2019, "Margin.of.Error")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_data_ACS_2021, "Margin.of.Error")
#Removing Year Built
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "YEAR.STRUCTURE.BUILT")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "YEAR.STRUCTURE.BUILT")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "YEAR.STRUCTURE.BUILT")
#Removing Unit Structure
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "UNITS.IN.STRUCTURE")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "UNITS.IN.STRUCTURE")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "UNITS.IN.STRUCTURE")
#Removing Unit BEDROOMS
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "BEDROOMS")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "BEDROOMS")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "BEDROOMS")
#Removing Unit ROOMS
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "ROOMS")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "ROOMS")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "ROOMS")
#Removing Unit VEHICLES.AVAILABLE
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "VEHICLES.AVAILABLE")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "VEHICLES.AVAILABLE")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "VEHICLES.AVAILABLE")
#Removing Unit HOUSE.HEATING.FUEL
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "HOUSE.HEATING.FUEL")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "HOUSE.HEATING.FUEL")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "HOUSE.HEATING.FUEL")
#Removing Unit MORTGAGE.STATUS
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "MORTGAGE.STATUS")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "MORTGAGE.STATUS")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "MORTGAGE.STATUS")
#Removing Unit GROSS.RENT.AS.A.PERCENTAGE.OF.HOUSEHOLD.INCOME..GRAPI
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "GROSS.RENT.AS.A.PERCENTAGE.OF.HOUSEHOLD.INCOME..GRAPI")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "GROSS.RENT.AS.A.PERCENTAGE.OF.HOUSEHOLD.INCOME..GRAPI")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "GROSS.RENT.AS.A.PERCENTAGE.OF.HOUSEHOLD.INCOME..GRAPI")
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "SELECTED.MONTHLY.OWNER.COSTS")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "SELECTED.MONTHLY.OWNER.COSTS")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "SELECTED.MONTHLY.OWNER.COSTS")
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "VALUE")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "VALUE")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "VALUE")
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
Housing_Cleaned_data_2019 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2019, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
Housing_Cleaned_data_2021 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2021, "YEAR.HOUSEHOLDER.MOVED.INTO.UNIT")
View(Housing_Cleaned_data_2018)
#Removing Unit YEAR.HOUSHOLDER.MOVED.INTO
Housing_Cleaned_data_2018 <- return_feature_subset_without_given_string(Housing_Cleaned_data_2018, "Estimate")
View(Housing_Cleaned_data_2018)
return_feature_subset_with_given_string <- function(df, subset){
return (df[ , grepl( subset , names( df ) ) ])
}
Housing_Cleaned_data_2019 <- return_feature_subset_with_given_string(Housing_Cleaned_data_2019, "Percent")
