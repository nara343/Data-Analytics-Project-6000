pRoll
df
lmRoll <- lm(Roll ~ Unem + Hgrad + Inc, data = df)
conditions <- data.frame(Unem = c(7), Hgrad = c(90000), Inc = (25000))
pRoll <- predict(lmRoll, conditions, interval="predict")
pRoll
set.seed(12345)
par(mar = rep(0.2,4))
data_matrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(data_matrix)[,nrow(data_matrix):1])
heatmap(data_matrix)
help(rbinom)
help(heatmap)
set.seed(678910)
for(i in 1:40){
coin_Flip <- rbinom(1, size = 1, prob = 0.5)
if(coin_Flip){
data_matrix[i,] <- data_matrix[i,] + rep(c(0,3), each = 5)
}
}
set.seed(678910)
for(i in 1:40){
coin_Flip <- rbinom(1, size = 1, prob = 0.5)
if(coin_Flip){
print(coin_Flip)
data_matrix[i,] <- data_matrix[i,] + rep(c(0,3), each = 5)
}
}
set.seed(678910)
for(i in 1:40){
coin_Flip <- rbinom(1, size = 1, prob = 0.5)
if(coin_Flip){
print(coin_Flip)
data_matrix[i,] <- data_matrix[i,] + rep(c(0,3), each = 5)
}
}
set.seed(678910)
for(i in 1:40){
coin_Flip <- rbinom(1, size = 1, prob = 0.5)
if(coin_Flip){
print(coin_Flip)
data_matrix[i, ] <- data_matrix[i, ] + rep(c(0,3), each = 5)
}
}
heatmap(data_matrix)
image(1:10, 1:40, t(data_Matrix)[, nrow(data_Matrix):1])
image(1:10, 1:40, t(data_matrix)[, nrow(data_matrix):1])
heatmap(data_matrix)
hh <- hclust(dist(data_matrix))
data_matrix_ordered <= data_matrix[hh$order,]
par(mfrow = c(1,3))
hh <- hclust(dist(data_matrix))
data_matrix_ordered <- data_matrix[hh$order,]
par(mfrow = c(1,3))
image(t(data_matrix_ordered)[, nrow(data_matrix_ordered):1])
plot(rowMeans(data_matrix_ordered), 40:1, , xlab="The Row Mean", ylab = "Row", pch19)
plot(colMeans(data_matrix_ordered), 40:1, , xlab="Column", ylab = "Column Mean", pch19)
plot(rowMeans(data_matrix_ordered), 40:1, , xlab="The Row Mean", ylab = "Row", pch =19)
plot(colMeans(data_matrix_ordered), 40:1, , xlab="Column", ylab = "Column Mean", pch=19)
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
require(party)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
require(party)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_ctree)
# read data in
nyt1<-read.csv("nyt1.csv")
# read data in
nyt1<-read.csv("nyt1.csv/")
# read data in
nyt1<-read.csv("./nyt1.csv/")
dir
path
# read data in
nyt1<-read.csv("nyt1.csv")
help(read/topic = )
help("read.csv")
# read data in
nyt1<-read.csv("nyt1.csv", header=TRUE)
# read data in
nyt1<-read.csv("C:/Users/Naran/DataAnalytics2022_Alejandro_Naranjo/Group2_Scripts/Lab2", header=TRUE)
require(kknn)
data(ionosphere)
# Creating the model using the training and testing set
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
(kknn)
require(kknn)
data(ionosphere)
#Splitting the data into a training/testing
ionosphere.learn <- ionosphere[1:200,]
ionosphere.valid <- ionosphere[-c(1:200),]
# Creating the model using the training and testing set
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
table(ionosphere.valid$class, fit.kknn$fit)
# Training the model using the training set using a distance of 1
(fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))
table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)
(fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))
table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)
data(iris)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
#Splitting the data into train and test
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
summary(iris.kknn)
fit <- fitted(iris.kknn)
table(iris.valid$Species, fit)
pcol <- as.character(as.numeric(iris.valid$Species))
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")
[(iris.valid$Species != fit)+1])
install.packages("car")
require(car)
scatterplotMatrix(iris)
# and
scatterplotMatrix(swiss)
scatterplotMatrix(iris)
# and
scatterplotMatrix(swiss)
require(lattice)
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
splom(~iris[1:3]|Species, data = iris,
layout=c(2,2), pscales = 0,
varnames = c("Sepal\nLength", "Sepal\nWidth", "Petal\nLength"),
page = function(...) {
ltext(x = seq(.6, .8, length.out = 4),
y = seq(.9, .6, length.out = 4),
labels = c("Three", "Varieties", "of", "Iris"),
cex = 2)
})
splom(~iris[1:3]|Species, data = iris,
layout=c(2,2), pscales = 0,
varnames = c("Sepal\nLength", "Sepal\nWidth", "Petal\nLength"),
page = function(...) {
ltext(x = seq(.6, .8, length.out = 4),
y = seq(.9, .6, length.out = 4),
labels = c("Three", "Varieties", "of", "Iris"),
cex = 2)
})
parallelplot(~iris[1:4] | Species, iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[-5], log = "xy") # plot all variables on log scale
pairs(iris, log = 1:4, # log the first four
main = "Lengths and Widths in [log]", line.main=1.5, oma=c(2,2,3,2))
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[-5], log = "xy") # plot all variables on log scale
pairs(iris, log = 1:4, # log the first four
main = "Lengths and Widths in [log]", line.main=1.5, oma=c(2,2,3,2))
## formula method
pairs(~ Fertility + Education + Catholic, data = swiss,
subset = Education < 20, main = "Swiss data, Education < 20")
pairs(USJudgeRatings)
## show only lower triangle (and suppress labeling for whatever reason):
pairs(USJudgeRatings, text.panel = NULL, upper.panel = NULL)
## put histograms on the diagonal
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(USJudgeRatings[1:5], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue",
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
## put (absolute) correlations on the upper panels,
## with size proportional to the correlations.
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(USJudgeRatings, lower.panel = panel.smooth, upper.panel = panel.cor)
data("iris")
head(iris)
library(ggplot2)
library(e1071)
qplot(Petal.Length, Petal.Width, data=iris, color = species)
qplot(Petal.Length, Petal.Width, data=iris, color = Species)
library(ggplot2)
library(e1071)
svm_model1 <- svm(Species~., data=iris)
summary(svm_model1)
plot(svm_model1, data=iris, Petal.Width~Petal.Length,
slice=list(Sepal.Width=3, Sepal.Length=4))
pred1 <- predict(svm_model1, iris)
table1 <- table(Predicted = pred1, Actual = iris$Species)
table
table1
model1_accuracy = sum(diag(table1))/sum(table1)
model1_accuracy
model1_error <- 1 - model1_accuracy
model1_error
svm_model2 <- svm(Species~., data=iris, kernel = "linear")
summary(svm_model2)
summary(svm_model2)
plot(svm_model2, data=iris, Petal.Width~Petal.Length,
slice=list(Sepal.Width=3, Sepal.Length=4))
pred2 <- predict(svm_model2, iris)
table2 <- table(Predicted = pred2, Actual = iris$Species)
table2
model2_accuracy <- sum(diag(table2))/sum(table2)
model2_accuracy
model2_error <- 1 - model2_accuracy
model2_error
svm_model3 <- svm(Species~., data=iris, kernel = "polynomial")
summary(svm_model3)
plot(svm_model3, data=iris, Petal.Width~Petal.Length,
slice=list(Sepal.Width=3, Sepal.Length=5))
plot(svm_model3, data=iris, Petal.Width~Petal.Length,
slice=list(Sepal.Width=3, Sepal.Length=4))
pred3 <- predict(svm_model3, iris)
table3 <- table(Predicted = pred3, Actual = iris$Species)
summary(svm_model1)
summary(svm_model2)
table3 <- table(Predicted = pred3, Actual = iris$Species)
table3
model3_accuracy <- sum(diag(table3))/sum(table3)
model3_accuracy
model3_error <- 1 - model3_accuracy
model3_error
help(svm)
coef(svm_model2)
coef(svm_model1)
#Working on Laptop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Income Data")
Income_data_ACS_2010 <- read.csv("ACSST1Y2010.S1901-Data.csv", skip=1)
Income_data_ACS_2011 <- read.csv("ACSST1Y2011.S1901-Data.csv", skip=1)
Income_data_ACS_2012 <- read.csv("ACSST1Y2012.S1901-Data.csv", skip=1)
Income_data_ACS_2013 <- read.csv("ACSST1Y2013.S1901-Data.csv", skip=1)
Income_data_ACS_2014 <- read.csv("ACSST1Y2014.S1901-Data.csv", skip=1)
Income_data_ACS_2015 <- read.csv("ACSST1Y2015.S1901-Data.csv", skip=1)
Income_data_ACS_2016 <- read.csv("ACSST1Y2016.S1901-Data.csv", skip=1)
Income_data_ACS_2017 <- read.csv("ACSST1Y2017.S1901-Data.csv", skip=1)
Income_data_ACS_2018 <- read.csv("ACSST1Y2018.S1901-Data.csv", skip=1)
Income_data_ACS_2019 <- read.csv("ACSST1Y2019.S1901-Data.csv", skip=1)
Income_data_ACS_2021 <- read.csv("ACSST1Y2021.S1901-Data.csv", skip=1)
summary(Income_data_ACS_2010)
#Working on Laptop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project/Housing Statistic")
Housing_data_ACS_2010 <- read.csv("ACSDP1Y2010.DP04-Data.csv", skip=1)
Housing_data_ACS_2011 <- read.csv("ACSDP1Y2011.DP04-Data.csv", skip=1)
Housing_data_ACS_2012 <- read.csv("ACSDP1Y2012.DP04-Data.csv", skip=1)
Housing_data_ACS_2013 <- read.csv("ACSDP1Y2013.DP04-Data.csv", skip=1)
Housing_data_ACS_2014 <- read.csv("ACSDP1Y2014.DP04-Data.csv", skip=1)
Housing_data_ACS_2015 <- read.csv("ACSDP1Y2015.DP04-Data.csv", skip=1)
Housing_data_ACS_2016 <- read.csv("ACSDP1Y2016.DP04-Data.csv", skip=1)
Housing_data_ACS_2017 <- read.csv("ACSDP1Y2017.DP04-Data.csv", skip=1)
Housing_data_ACS_2018 <- read.csv("ACSDP1Y2018.DP04-Data.csv", skip=1)
Housing_data_ACS_2019 <- read.csv("ACSDP1Y2019.DP04-Data.csv", skip=1)
Housing_data_ACS_2021 <- read.csv("ACSDP1Y2021.DP04-Data.csv", skip=1)
#Load Income Data Based On Race #
setwd("C:/Users/Naran/Data Analytics Project")
View(Housing_data_ACS_2012)
View(Income_data_ACS_2018)
#Working on Laptop
setwd("C:/Users/Naran/Data-Analytics-Project-6000/Data Analytics Project")
cost_of_living_data <- read.csv("Cost_Of_Living_By_State.csv")
View(cost_of_living_data)
summary(cost_of_living_data)
ggplot(cost_of_living_data, aes(state, costIndex)) + geom_point()
library(ggplot2)
ggplot(cost_of_living_data, aes(state, costIndex)) + geom_point()
ggplot(cost_of_living_data, aes(costIndex, state)) + geom_point()
ggplot(cost_of_living_data, aes(costIndex, state, color="Green")) + geom_point()
ggplot(cost_of_living_data, aes(costIndex, state, color=state)) + geom_point()
ggplot(cost_of_living_data, aes(costIndex, state)) + geom_point(stat="identity")
ggplot(cost_of_living_data, aes(costIndex, state)) + geom_point(stat="identity")
order_by_cost_index <- cost_of_living_data[order(cost_of_living_data$costIndex)]
order_by_cost_index <- cost_of_living_data[order(cost_of_living_data$costIndex),]
ggplot(cost_of_living_data, aes(costIndex, state)) + geom_point(stat="identity")
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point(stat="identity")
order_by_cost_index <- cost_of_living_data[order(cost_of_living_data$costIndex),]
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point()
order_by_cost_index <- cost_of_living_data
order_by_cost_index$costIndex <- factor(order_by_cost_index$costIndex,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point()
order_by_cost_index <- cost_of_living_data
order_by_cost_index$costIndex <- factor(order_by_cost_index$state,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point()
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point(stat = "identity")
order_by_cost_index$state
cost_of_living_data$state
order_by_cost_index$state <- factor(order_by_cost_index$state,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
order_by_cost_index$state
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point(stat = "identity")
order_by_cost_index <- cost_of_living_data
order_by_cost_index$state <- factor(order_by_cost_index$state,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
order_by_cost_index$state
ggplot(order_by_cost_index, aes(costIndex, state)) + geom_point(stat = "identity")
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label(label=costIndex)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label(order_by_cost_index, label=costIndex)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label(order_by_cost_index, label=costIndex)
ggplot(order_by_cost_index, aes(costIndex, state, label=costIndex)) +
geom_point(stat = "identity")
order_by_cost_index <- cost_of_living_data
order_by_cost_index$state <- factor(order_by_cost_index$state,
levels = order_by_cost_index$state[order(order_by_cost_index$costIndex)])
ggplot(order_by_cost_index, aes(costIndex, state, label=costIndex)) +
geom_point(stat = "identity")
ggplot(order_by_cost_index, aes(costIndex, state, label=costIndex)) +
geom_point(stat = "identity") + geom_text()
ggplot(order_by_cost_index, aes(costIndex, state, label=costIndex)) +
geom_point(stat = "identity") + geom_text(size=1)
ggplot(order_by_cost_index, aes(costIndex, state, label=costIndex)) +
geom_point(stat = "identity") + geom_text(size=2)
ggplot(order_by_cost_index, aes(costIndex, state, label=costIndex)) +
geom_point(stat = "identity") + geom_text(size=2, position = 0.1)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex), y = pos)
pos <- order_by_cost_index$costIndex + 0.5
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex), y = pos)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex, y = pos), size = 2)
pos <- order_by_cost_index$costIndex
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex, y = pos), size = 2)
pos
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex, y = pos), size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex), size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex, y = pos), size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label=costIndex), size = 2, theme_text = (vjust=0.5))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label=costIndex), size = 2)
geom_point(stat = "identity") + geom_label_repel(aes(label=costIndex, size = 2)
asd
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label=costIndex, size = 2))
require("ggrepel")
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label=costIndex, size = 2))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label=costIndex, size = 1))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 1)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex, y = +1 ), size = 4)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex, y = costIndex + 1), size = 4)
ggplot(order_by_cost_index, aes(costIndex, state, label = costIndex)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex, y = costIndex +), size = 4)
ggplot(order_by_cost_index, aes(costIndex, state, label = costIndex)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4, hjust=0.5)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4, hjust=0.5)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4, hjust=5)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4, hjust=-5)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4, hjust=-2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_text(aes(label = costIndex), size = 4, hjust=-1)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 0.5)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size =1, hjust = -1)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size =3, hjust = -1)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 3)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = state), size = 3)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = state), size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = costIndex >= 10), size = 2)
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = (100 < costIndex), size = 2)
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = (100 < costIndex), size = 2) + asd
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = costIndex >= 100 , size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = costIndex >= 100 , size = 2))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = costIndex >= 100 && 90 <= costIndex <= 100 , size = 2))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, colour = (costIndex >= 100 && 90 <= costIndex <= 100), size = 2))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, size = 2))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, size = 1.5))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex, size = 1))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 1))
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 1)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 2)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 3)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex + state), size = 3)
ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 3)
california <- cost_of_living_data[cost_of_living_data$state = "California", ]
california <- cost_of_living_data[cost_of_living_data$state == "California", ]
washington <- cost_of_living_data[cost_of_living_data$state == "Washington", ]
NewYork    <- cost_of_living_data[cost_of_living_data$state == "New York", ]
print(graph_by_state_index + ggtitle(title("Cost of Living Index vs State")) +
labs(y = "State Name", x = "Cost Of Living Index"))
graph_by_state_index <- ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 3)
print(graph_by_state_index + ggtitle(title("Cost of Living Index vs State")) +
labs(y = "State Name", x = "Cost Of Living Index"))
print(graph_by_state_index + labs(y = "State Name", x = "Cost Of Living Index"))
print(graph_by_state_index + labs(title = "State vs Cost of Index Rating", y = "State Name", x = "Cost of Living Index"))
graph_by_state_index <- ggplot(order_by_cost_index, aes(costIndex, state)) +
geom_point(stat = "identity") + geom_label_repel(aes(label = costIndex), size = 2.5)
print(graph_by_state_index + labs(title = "State vs Cost of Index", y = "State Name", x = "Cost of Living Index"))
california
california_info <- ggplot(california, aes(y = colnames(california))) + geom_point()
print(california_info + labs(title = "Cost of Living by Category for California", y = "Category", x = "Index Rating"))
california
california_info <- ggplot(california, aes(x = c(1,1,1,1,1,1),y = colnames(california))) + geom_point()
print(california_info + labs(title = "Cost of Living by Category for California", y = "Category", x = "Index Rating"))
california_info <- ggplot(california, aes(x = c(1,1,1,1,1,1),y = rownames(california))) + geom_point()
print(california_info + labs(title = "Cost of Living by Category for California", y = "Category", x = "Index Rating"))
colnames(california)
rownames(california)
california_info <- ggplot(california, aes(y = colnames(california))) + geom_point()
print(california_info + labs(title = "Cost of Living by Category for California", y = "Category", x = "Index Rating"))
rlang::last_error()
print('ilovebella')
for(x in 1000){
print('ilovebella')
}
for(x in 1000){
print('ilovebella')
}
print('ilovebella')
for(x in 1000){
print('ilovebella')
}
for(x in 10){
print('ilovebella')
}
print(x)
for(x in 1:1000){
print('ilovebella')
}
for(x in 1:1000){
print('i love bella')
}
for(x in 1:10000){
print('i love bella')
}
print(california_info + labs(title = "Cost of Living by Category for California", y = "Category", x = "Index Rating"))
#
california_info <- ggplot(aes(y = colnames(california))) + geom_point()
print(california_info + labs(title = "Cost of Living by Category for California", y = "Category", x = "Index Rating"))
View(cost_of_living_data)
#
order_by_cost_housing <- cost_of_living_data
order_by_cost_housing$state <- factor(order_by_cost_housing$state,
levels = order_by_cost_housing$state[order(order_by_cost_housing$housingCost)])
graph_by_state_hosuing <- ggplot(order_by_cost_housing , aes(housingCost, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = housingCost), size = 2.5)
graph_by_state_housing <- ggplot(order_by_cost_housing , aes(housingCost, state)) +
geom_point(stat = "identity") +
geom_label_repel(aes(label = housingCost), size = 2.5)
print(graph_by_state_housing +
labs(title = "State vs Cost of Housing Cost", y = "State Name", x = "Housing Cost Index"))
View(Income_data_ACS_2010)
